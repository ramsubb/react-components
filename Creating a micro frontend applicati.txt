Creating a micro frontend application with React involves breaking down your application into smaller, independently deployable and scalable pieces. Each micro frontend is a self-contained module or feature that can be developed, deployed, and updated independently. Below is a simplified example of a React micro frontend architecture. Note that this is just a starting point, and in a real-world scenario, you might use more sophisticated tools and techniques.

Let's create a basic example with two micro frontends - Header and Content.

1. Set Up a Micro Frontend Project
Create a new React app for each micro frontend:

Header Micro Frontend
bash
Copy code
npx create-react-app header-micro-frontend
cd header-micro-frontend
npm start
Content Micro Frontend
bash
Copy code
npx create-react-app content-micro-frontend
cd content-micro-frontend
npm start
2. Implement Micro Frontends
Header Micro Frontend (header-micro-frontend/src/App.js)
jsx
Copy code
import React from 'react';

const Header = () => {
  return (
    <header>
      <h1>Header Micro Frontend</h1>
    </header>
  );
};

export default Header;
Content Micro Frontend (content-micro-frontend/src/App.js)
jsx
Copy code
import React from 'react';

const Content = () => {
  return (
    <div>
      <h2>Content Micro Frontend</h2>
      <p>This is the content micro frontend.</p>
    </div>
  );
};

export default Content;
3. Set Up a Shell Application
Create a shell application that will bring together these micro frontends:

Shell Application
bash
Copy code
npx create-react-app shell
cd shell
npm start
4. Integrate Micro Frontends in the Shell
Shell (shell/src/App.js)
jsx
Copy code
import React, { lazy, Suspense } from 'react';
import './App.css';

const Header = lazy(() => import('header-micro-frontend/src/App'));
const Content = lazy(() => import('content-micro-frontend/src/App'));

const App = () => {
  return (
    <div>
      <Suspense fallback={<div>Loading...</div>}>
        <Header />
        <Content />
      </Suspense>
    </div>
  );
};

export default App;
5. Update Webpack Configuration for Module Federation
To enable Module Federation, you need to configure Webpack in each micro frontend and the shell. Add the following configurations to the webpack.config.js files:

Header Micro Frontend (header-micro-frontend/webpack.config.js)
javascript
Copy code
const { ModuleFederationPlugin } = require('webpack').container;

module.exports = {
  plugins: [
    new ModuleFederationPlugin({
      name: 'header',
      filename: 'remoteEntry.js',
      exposes: {
        './Header': './src/App',
      },
    }),
  ],
};
Content Micro Frontend (content-micro-frontend/webpack.config.js)
javascript
Copy code
const { ModuleFederationPlugin } = require('webpack').container;

module.exports = {
  plugins: [
    new ModuleFederationPlugin({
      name: 'content',
      filename: 'remoteEntry.js',
      exposes: {
        './Content': './src/App',
      },
    }),
  ],
};
Shell (shell/webpack.config.js)
javascript
Copy code
const { ModuleFederationPlugin } = require('webpack').container;

module.exports = {
  plugins: [
    new ModuleFederationPlugin({
      name: 'shell',
      remotes: {
        header: 'header@http://localhost:3001/remoteEntry.js',
        content: 'content@http://localhost:3002/remoteEntry.js',
      },
    }),
  ],
};
6. Run the Applications
Start each micro frontend separately:

bash
Copy code
cd header-micro-frontend
npm start
bash
Copy code
cd content-micro-frontend
npm start
Start the shell application:

bash
Copy code
cd shell
npm start
Visit http://localhost:3000 in your browser to see the integrated micro frontend application.

This is a basic example, and in a real-world scenario, you might use tools like Module Federation, single-spa, or other micro frontend frameworks to manage communication, routing, and orchestration between micro frontends more effectively.




